(in-package :cl-user)
(defpackage cl-cuda.api.nvrtc
  (:export :nvrtcProgram
           :nvrtcCreateProgram
           :nvrtcDestroyProgram
           :nvrtcCompileProgram
           :nvrtcGetPtx
           :nvrtcGetPtxSize
           :nvrtcGetProgramLogSize
           :nvrtcGetProgramLog
           :nvrtcResult
           :nvrtc-success))
(in-package :cl-cuda.api.nvrtc)
;; next section imported from file /usr/local/include/nvrtc.h

#| MACRO_DEFINITION
(defconstant +--nvrtc-h--+ ACTUAL_VALUE_HERE)
|#

(cffi:defcenum nvrtcresult-enum
  "\ingroup error
\brief   The enumerated type nvrtcResult defines API call result codes.
         NVRTC API functions return nvrtcResult to indicate the call
         result."
  (:nvrtc-success 0)
  (:nvrtc-error-out-of-memory 1)
  (:nvrtc-error-program-creation-failure 2)
  (:nvrtc-error-invalid-input 3)
  (:nvrtc-error-invalid-program 4)
  (:nvrtc-error-invalid-option 5)
  (:nvrtc-error-compilation 6)
  (:nvrtc-error-builtin-operation-failure 7)
  (:nvrtc-error-no-name-expressions-after-compilation 8)
  (:nvrtc-error-no-lowered-names-before-compilation 9)
  (:nvrtc-error-name-expression-not-valid 10)
  (:nvrtc-error-internal-error 11))

(cffi:defctype nvrtcresult nvrtcresult-enum)

(cffi:defcfun "nvrtcGetErrorString" (:pointer :char)
  "\ingroup error
\brief   nvrtcGetErrorString is a helper function that returns a string
         describing the given nvrtcResult code, e.g., NVRTC_SUCCESS to
         \c \"NVRTC_SUCCESS\".
         For unrecognized enumeration values, it returns
         \c \"NVRTC_ERROR unknown\".

\param   [in] result CUDA Runtime Compilation API result code.
\return  Message string for the given #nvrtcResult code."
  (result nvrtcResult))

(cffi:defcfun "nvrtcVersion" nvrtcResult
  "\ingroup query
\brief   nvrtcVersion sets the output parameters \p major and \p minor
         with the CUDA Runtime Compilation version number.

\param   [out] major CUDA Runtime Compilation major version number.
\param   [out] minor CUDA Runtime Compilation minor version number.
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_INPUT \endlink"
  (major (:pointer :int))
  (minor (:pointer :int)))

(cffi:defcstruct -nvrtcprogram)

(cffi:defctype nvrtcProgram (:pointer (:struct -nvrtcProgram)))

(cffi:defcfun "nvrtcCreateProgram" nvrtcResult
  "\ingroup compilation
\brief   nvrtcCreateProgram creates an instance of nvrtcProgram with the
         given input parameters, and sets the output parameter \p prog with
         it.

\param   [out] prog         CUDA Runtime Compilation program.
\param   [in]  src          CUDA program source.
\param   [in]  name         CUDA program name.\n
                            \p name can be \c NULL; \c \"default_program\" is
                            used when \p name is \c NULL.
\param   [in]  numHeaders   Number of headers used.\n
                            \p numHeaders must be greater than or equal to 0.
\param   [in]  headers      Sources of the headers.\n
                            \p headers can be \c NULL when \p numHeaders is
                            0.
\param   [in]  includeNames Name of each header by which they can be
                            included in the CUDA program source.\n
                            \p includeNames can be \c NULL when \p numHeaders
                            is 0.
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_OUT_OF_MEMORY \endlink
  - \link #nvrtcResult NVRTC_ERROR_PROGRAM_CREATION_FAILURE \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_INPUT \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_PROGRAM \endlink

\see     ::nvrtcDestroyProgram"
  (prog (:pointer nvrtcProgram))
  (src (:pointer :char))
  (name (:pointer :char))
  (numheaders :int)
  (headers (:pointer (:pointer :char)))
  (includenames (:pointer (:pointer :char))))

(cffi:defcfun "nvrtcDestroyProgram" nvrtcResult
  "\ingroup compilation
\brief   nvrtcDestroyProgram destroys the given program.

\param    [in] prog CUDA Runtime Compilation program.
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_PROGRAM \endlink

\see     ::nvrtcCreateProgram"
  (prog (:pointer nvrtcProgram)))

(cffi:defcfun "nvrtcCompileProgram" nvrtcResult
  "\ingroup compilation
\brief   nvrtcCompileProgram compiles the given program.

It supports compile options listed in \ref options."
  (prog nvrtcProgram)
  (numoptions :int)
  (options (:pointer (:pointer :char))))

(cffi:defcfun "nvrtcGetPTXSize" nvrtcResult
  "\ingroup compilation
\brief   nvrtcGetPTXSize sets \p ptxSizeRet with the size of the PTX
         generated by the previous compilation of \p prog (including the
         trailing \c NULL).

\param   [in]  prog       CUDA Runtime Compilation program.
\param   [out] ptxSizeRet Size of the generated PTX (including the trailing
                          \c NULL).
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_INPUT \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_PROGRAM \endlink

\see     ::nvrtcGetPTX"
  (prog nvrtcProgram)
  (ptxsizeret (:pointer :pointer)))

(cffi:defcfun "nvrtcGetPTX" nvrtcResult
  "\ingroup compilation
\brief   nvrtcGetPTX stores the PTX generated by the previous compilation
         of \p prog in the memory pointed by \p ptx.

\param   [in]  prog CUDA Runtime Compilation program.
\param   [out] ptx  Compiled result.
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_INPUT \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_PROGRAM \endlink

\see     ::nvrtcGetPTXSize"
  (prog nvrtcProgram)
  (ptx (:pointer :char)))

(cffi:defcfun "nvrtcGetProgramLogSize" nvrtcResult
  "\ingroup compilation
\brief   nvrtcGetProgramLogSize sets \p logSizeRet with the size of the
         log generated by the previous compilation of \p prog (including the
         trailing \c NULL).

Note that compilation log may be generated with warnings and informative
messages, even when the compilation of \p prog succeeds.

\param   [in]  prog       CUDA Runtime Compilation program.
\param   [out] logSizeRet Size of the compilation log
                          (including the trailing \c NULL).
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_INPUT \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_PROGRAM \endlink

\see     ::nvrtcGetProgramLog"
  (prog nvrtcProgram)
  (logsizeret (:pointer :pointer)))

(cffi:defcfun "nvrtcGetProgramLog" nvrtcResult
  "\ingroup compilation
\brief   nvrtcGetProgramLog stores the log generated by the previous
         compilation of \p prog in the memory pointed by \p log.

\param   [in]  prog CUDA Runtime Compilation program.
\param   [out] log  Compilation log.
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_INPUT \endlink
  - \link #nvrtcResult NVRTC_ERROR_INVALID_PROGRAM \endlink

\see     ::nvrtcGetProgramLogSize"
  (prog nvrtcProgram)
  (log (:pointer :char)))

(cffi:defcfun "nvrtcAddNameExpression" nvrtcResult
  "\ingroup compilation
\brief   nvrtcAddNameExpression notes the given name expression
         denoting the address of a __global__ function 
         or __device__/__constant__ variable.

The identical name expression string must be provided on a subsequent
call to nvrtcGetLoweredName to extract the lowered name.
\param   [in]  prog CUDA Runtime Compilation program.
\param   [in] name_expression constant expression denoting the address of
              a __global__ function or __device__/__constant__ variable.
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION \endlink

\see     ::nvrtcGetLoweredName"
  (prog nvrtcProgram)
  (name-expression (:pointer :char)))

(cffi:defcfun "nvrtcGetLoweredName" nvrtcResult
  "\ingroup compilation
\brief   nvrtcGetLoweredName extracts the lowered (mangled) name
         for a __global__ function or __device__/__constant__ variable,
         and updates *lowered_name to point to it. The memory containing
         the name is released when the NVRTC program is destroyed by 
         nvrtcDestroyProgram.
         The identical name expression must have been previously
         provided to nvrtcAddNameExpression.

\param   [in]  prog CUDA Runtime Compilation program.
\param   [in] name_expression constant expression denoting the address of 
              a __global__ function or __device__/__constant__ variable.
\param   [out] lowered_name initialized by the function to point to a
              C string containing the lowered (mangled)
              name corresponding to the provided name expression.
\return
  - \link #nvrtcResult NVRTC_SUCCESS \endlink
  - \link #nvrtcResult NVRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION \endlink
  - \link #nvrtcResult NVRTC_ERROR_NAME_EXPRESSION_NOT_VALID \endlink

\see     ::nvrtcAddNameExpression"
  (prog nvrtcProgram)
  (name-expression (:pointer :char))
  (lowered-name (:pointer (:pointer :char))))
